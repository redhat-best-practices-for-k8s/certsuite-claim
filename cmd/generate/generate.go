// Copyright (C) 2020 Red Hat, Inc.
//
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
// Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

package main

import (
	"fmt"
	"io"
	"os"
	"path"
	"time"

	"github.com/a-h/generate"
	igenerate "github.com/redhat-best-practices-for-k8s/certsuite-claim/internal/generate"
)

const (
	claimSchemaFileName                  = "claim.schema.json"
	claimSchemaGoPackage                 = "claim"
	copyrightNoticeFile                  = "generated-copyright-notice.txt"
	errorApplyingOverrideConfigExitCode  = 3
	errorGeneratingGenericSchemaExitCode = 1
	errorGettingOverrideConfigExitCode   = 2
	errorReadingCopyrightNoticeExitCode  = 5
	errorWritingOutputExitCode           = 4
	overrideFileLocation                 = "override.json"
	schemasDirectory                     = "schemas"
)

var (
	claimSchemaLocation = path.Join(schemasDirectory, claimSchemaFileName)
	inputFiles          = []string{claimSchemaLocation}
	outputGoFile        = path.Join("pkg", "claim", "schema.go")
)

func readCopyrightNoticeFile() ([]byte, error) {
	return os.ReadFile(copyrightNoticeFile)
}

func prependCopyrightNotice(w io.Writer, contents []byte) error {
	_, err := w.Write(contents)
	return err
}

func prependCustomCodeGenerationMessage(w io.Writer) error {
	currentTime := time.Now()
	msg := []string{
		"",
		"",
		"//",
		"// Code generated by `certsuite-claim/cmd/generate/generate.go` on: " + currentTime.String(),
		"//",
		"// `https://github.com/a-h/generate` provides a generic set of interfaces to convert JSON schema into",
		"// workable GoLang struct implementations.  However, the code generator is limited and does not allow",
		"// type remapping.  By default, JSON Schema \"object\" types are remapped to custom struct definitions.",
		"// This becomes a problem in our case, as we do not define certain facets such as \"Hosts\" or",
		"// \"LshwOutput\".  This CLI driven generator augments the stock generator to allow overrides to generic",
		"// \"map[string]interface{}\", which is capable of representing arbitrary JSON data.",
		"//",
		"// Warning:  Do not edit this file by hand.  Instead, use Makefile targets.",
		"//",
		"",
	}
	for _, line := range msg {
		_, err := fmt.Fprintln(w, line)
		if err != nil {
			return err
		}
	}
	return nil
}

func fatalError(err error, code int) {
	fmt.Fprintf(os.Stderr, "Fatal error: %v\n", err)
	os.Exit(code)
}

func main() {
	g, w, err := igenerate.New(outputGoFile, inputFiles...)
	if err != nil {
		fatalError(err, errorGeneratingGenericSchemaExitCode)
	}

	overrideConfig, err := igenerate.GetOverrideConfig(overrideFileLocation)
	if err != nil {
		fatalError(err, errorGettingOverrideConfigExitCode)
	}

	err = igenerate.ApplyOverrideConfiguration(g, overrideConfig)
	if err != nil {
		fatalError(err, errorApplyingOverrideConfigExitCode)
	}

	contents, err := readCopyrightNoticeFile()
	if err != nil {
		fatalError(err, errorReadingCopyrightNoticeExitCode)
	}

	err = prependCopyrightNotice(w, contents)
	if err != nil {
		fatalError(err, errorWritingOutputExitCode)
	}

	err = prependCustomCodeGenerationMessage(w)
	if err != nil {
		fatalError(err, errorWritingOutputExitCode)
	}

	generate.Output(w, g, claimSchemaGoPackage)
}
